#!/usr/local/bin/php -q
<?php
ob_start();
error_reporting(E_ALL);
ini_set("display_errors", 1);
require __DIR__ .'/vendor/autoload.php';

function usage($message){
	echo($message . "\n\n");
	echo <<< EOL
docker run -i -t rioriost/test-cosmos -e COSMOS_URI="https://REPLACEHERE.documents.azure.com:443", COSMOS_KEY="PrimaryOrSecondaryKey==", DB_ID="test_db", COL_ID="test_collection"
You can find URI, PRIMARY KEY or SECONDARY KEY on [Keys] pane of Cosmos DB [Menu] on Azure Portal.
EOL;
	exit();
}

$opts = array();
#running on docker
if($argc >= 2){
	foreach($argv as $a){
		@list($k, $v) = explode("=", $a);
		if($k != "" && $v != ""){
			$opts[$k] = rtrim($v, ",");
		}
	}
#may be on ACI
} else {
	foreach($_ENV as $k=>$v){
		$opts[$k] = rtrim($v, ",");
	}
}

$uri = $opts["COSMOS_URI"];
if($uri === ""){
	usage("CosmosDB URI is needed.");
}

$uri_parts = parse_url($uri);
if($uri_parts['scheme'] != "https"){
	usage("CosmosDB URI must be started with 'https' scheme.");
}

$master_key = $opts["COSMOS_KEY"];
if($master_key === ""){
        usage("CosmosDB PRIMARY or SECONDARY KEY is needed.");
}

$db_id = $opts["DB_ID"];
if($db_id === ""){
        usage("DB ID you want to connect is needed.");
}

$col_id = $opts["COL_ID"];
if($col_id === ""){
        usage("Collection ID you want to connect is needed.");
}

$conn = new \Jupitern\CosmosDb\CosmosDb($uri, $master_key);
$conn->setHttpClientOptions(['verify' => false]); // optional: set guzzle client options.
$db = $conn->selectDB($db_id);
$collection = $db->selectCollection($col_id);

$res = \Jupitern\CosmosDb\QueryBuilder::instance()
    ->setCollection($collection)
    ->select("*")
    ->find(true) // pass true if is cross partition query
    ->toArray();

var_dump($res);

ob_end_flush();
?>
